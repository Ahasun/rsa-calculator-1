{"version":3,"sources":["components/Navbar/Navbar.js","App.js","serviceWorker.js","StateProvider.js","Reducer.js","index.js"],"names":["Navbar","className","App","Boolean","window","location","hostname","match","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","rando","require","p","BigInt","q","n","phi","e","d","errorbag","millerTest","a","b","res","power","checkPrime","i","state","action","console","log","type","item","message","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"ygBAYeA,MAVf,WACE,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,iBACb,gDCMOC,MARf,WACE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,QCKcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZC,IAAMC,EAAeC,0BAGfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OAC3B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC/CC,I,iBCRCI,EADUC,EAAQ,KACFD,MAETL,EAAe,CAC1BO,EAAGC,OAAO,GACVC,EAAGD,OAAO,GACVE,EAAGF,OAAO,GACVG,IAAKH,OAAO,GACZI,EAAGJ,OAAO,GACVK,EAAGL,OAAO,GACVM,SAAU,IAeNC,EAAa,SAACF,EAAGH,GAAO,IAAD,EAClB,CAACF,OAAOK,GAAIL,OAAOE,IAA3BG,EAD0B,KACvBH,EADuB,KAE3B,IAGIH,EAjBQ,SAACS,EAAGC,EAAGP,GAAO,IAAD,EACb,CAACF,OAAOQ,GAAIR,OAAOS,GAAIT,OAAOE,IAAzCM,EADwB,KACrBC,EADqB,KAClBP,EADkB,KAEzB,IAAIQ,EAAMV,OAAO,GAEjB,IADAQ,GAAKN,EACEO,EAAIT,OAAO,IACZS,EAAIT,OAAO,KAAIU,EAAOA,EAAMF,EAAKN,GACrCO,IAAMT,OAAO,GACbQ,EAAKA,EAAIA,EAAKN,EAEhB,OAAOQ,EAQCC,CAFNX,OAAO,GACNA,OAAOH,EAAM,IAAW,QAA6BK,EAAIF,OAAO,IAClDK,EAAGH,GACpB,GAAIH,IAAMC,OAAO,IAAMD,IAAMG,EAAIF,OAAO,GAAI,OAAO,EAEnD,KAAOK,IAAMH,EAAIF,OAAO,IAAI,CAI1B,GAHAD,EAAKA,EAAIA,EAAKG,EACdG,GAAKL,OAAO,GAERD,IAAMC,OAAO,GAAI,OAAO,EAE5B,GAAID,IAAMG,EAAIF,OAAO,GAAI,OAAO,EAElC,OAAO,GAGHY,EAAa,SAACV,GAGlB,IAFAA,EAAIF,OAAOE,KAEFF,OAAO,IAAME,IAAMF,OAAO,GAAI,OAAO,EAC9C,GAAIE,GAAKF,OAAO,GAAI,OAAO,EAG3B,IAFA,IAAIK,EAAIH,EAAIF,OAAO,GAEZK,EAAIL,OAAO,KAAOA,OAAO,IAAIK,GAAKL,OAAO,GAChD,IAAK,IAAIa,EAAI,EAAGA,EAAI,MAAQA,EAC1B,IAAKN,EAAWF,EAAGH,GAAI,OAAO,EAEhC,OAAO,GA2BMX,EAxBC,SAACuB,EAAOC,GAEtB,OADAC,QAAQC,IAAIF,GACJA,EAAOG,MACb,IAAK,cACH,IAAMnB,EAAIC,OAAOe,EAAOI,KAAKpB,GACvBE,EAAID,OAAOe,EAAOI,KAAKlB,GAC7B,IAAKW,EAAWb,KAAOa,EAAWX,GAChC,OAAO,2BACFa,GADL,IAEER,SAAS,GAAD,mBACHQ,EAAMR,UADH,CAEN,CAAEc,QAAS,wCAIjB,IAAMlB,EAAIH,EAAIE,EACRE,GAAOJ,EAAIC,OAAO,KAAOC,EAAID,OAAO,IAC1C,OAAO,2BAAKc,GAAZ,IAAmBf,IAAGE,IAAGC,IAAGC,MAAKG,SAAU,KAE7C,QACE,OAAOQ,ICxEbO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAe/B,aAAcA,EAAcD,QAASA,GAClD,kBAAC,EAAD,QAGJiC,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMb,c","file":"static/js/main.12b60e77.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar__brand\">\n        <h2>RSA Algorithm</h2>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Setup data layer\n// We need this to track the changes\n\nimport React, { createContext, useContext, useReducer } from \"react\";\n\n// Data layer\nexport const StateContext = createContext();\n\n// build a provider\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","/* global BigInt */\n\nconst randojs = require(\"@nastyox/rando.js\");\nconst rando = randojs.rando;\n\nexport const initialState = {\n  p: BigInt(0),\n  q: BigInt(0),\n  n: BigInt(0),\n  phi: BigInt(0),\n  e: BigInt(0),\n  d: BigInt(0),\n  errorbag: [],\n};\n\nconst power = (a, b, n) => {\n  [a, b, n] = [BigInt(a), BigInt(b), BigInt(n)];\n  let res = BigInt(1);\n  a %= n;\n  while (b > BigInt(0)) {\n    if (b & BigInt(1)) res = (res * a) % n;\n    b >>= BigInt(1);\n    a = (a * a) % n;\n  }\n  return res;\n};\n\nconst millerTest = (d, n) => {\n  [d, n] = [BigInt(d), BigInt(n)];\n  const a =\n    BigInt(2) +\n    (BigInt(rando(100000000, 10000000000000000000000)) % (n - BigInt(4)));\n  let p = power(a, d, n);\n  if (p === BigInt(1) || p === n - BigInt(1)) return true;\n\n  while (d !== n - BigInt(1)) {\n    p = (p * p) % n;\n    d *= BigInt(2);\n\n    if (p === BigInt(1)) return false;\n\n    if (p === n - BigInt(1)) return true;\n  }\n  return false;\n};\n\nconst checkPrime = (n) => {\n  n = BigInt(n);\n\n  if (n <= BigInt(1) || n === BigInt(4)) return false;\n  if (n <= BigInt(3)) return true;\n  let d = n - BigInt(1);\n\n  while (d % BigInt(2) === BigInt(0)) d /= BigInt(2);\n  for (var i = 0; i < 2000; ++i) {\n    if (!millerTest(d, n)) return false;\n  }\n  return true;\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  switch (action.type) {\n    case \"SET_P_AND_Q\": {\n      const p = BigInt(action.item.p);\n      const q = BigInt(action.item.q);\n      if (!checkPrime(p) || !checkPrime(q)) {\n        return {\n          ...state,\n          errorbag: [\n            ...state.errorbag,\n            { message: \"P and Q should be prime numbers.\" },\n          ],\n        };\n      }\n      const n = p * q;\n      const phi = (p - BigInt(1)) * (q - BigInt(1));\n      return { ...state, p, q, n, phi, errorbag: [] };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./Reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}